import java.lang.reflect.Array;
public class Solution {
    public List<List<String>> partition(String s) {
        int n = s.length();
        boolean[][] isPalindrome = new boolean[n][n];
        for (int i = 0; i < n; i++)
            isPalindrome[i][i] = true;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    if (j - i < 2 || isPalindrome[i + 1][j - 1])
                        isPalindrome[i][j] = true;
                }
            }
        }
        List<List<String>>[] palindromes = (List<List<String>>[])Array.newInstance(List.class, n + 1);

        palindromes[n] = (List)(new LinkedList<List<String>>());
        List<String> emptyList = new LinkedList<>();
        palindromes[n].add(emptyList);
        for (int i = n - 1; i >= 0; i--) {
            palindromes[i] = (List)(new LinkedList<List<String>>());
            for (int j = i; j < n; j++) {
                if (isPalindrome[i][j]) {
                    List<List<String>> lists = palindromes[j + 1];
                    String substring = s.substring(i, j + 1);
                    for (List<String> list : lists) {
                        List<String> newList = new LinkedList<>();
                        newList.add(substring);
                        newList.addAll(list);
                        palindromes[i].add(newList);
                    }
                }
            }
        }
        return palindromes[0];
    }

}
