//Time Complexity of optimized solution: O(logn)

public class Solution {
public double power(double x, int n) {
	if (n == 0)
		return 1;
 
	double v = power(x, n / 2);
 
	if (n % 2 == 0) {
		return v * v;
	} else {
		return v * v * x;
	}
}
 
public double pow(double x, int n) {
	if (n < 0) {
		return 1 / power(x, -n);
	} else {
		return power(x, n);
	}
}
}



//////////////////////////////
//iterative solution
public class Solution {
    public double pow(double x, int n) {
        // Cool and smart solution
        double res;
        if(n==0) return 1;
        double half = pow(x,n/2);
        if(n%2==0) {
            res = half*half;
        } else if(n>0) {
            res = half*half*x;
        } else {
            res = half*half/x;
        }
        return res;
    }
}
