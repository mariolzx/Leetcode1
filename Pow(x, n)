//Time Complexity of optimized solution: O(logn)
public class Solution {
public double myPow(double x, int n) {
	if (n < 0) {
		return 1 / pow(x, -n);
	} else {
		return pow(x, n);
	}
}
 
public double pow(double x, int n) {
    if (n == 0)
		return 1;
 
	double v = pow(x, n / 2);
 
	if (n % 2 == 0) {
		return v * v;
	} else {
		return v * v * x;
	}

}
}

////////////////////////
public class Solution {
    public double pow(double x, int n) {
        double res=1;
        double result=0;
        int m=Math.abs(n);
        while (m>0) {
            if (m%2!=0) {res=res*x;}
            m=m/2;
            x=x*x;
        }
    if (n<0) return 1/res;
    return res;
    }
}



