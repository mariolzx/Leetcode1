http://www.cnblogs.com/EdwardLiu/p/5084577.html
public class Solution {
    char[][] image;
    int m;
    int n;
    public int minArea(char[][] iImage, int x, int y) {
        image = iImage;
        m = image.length;
        n = image[0].length;
        int left = searchColumn(0, y, true);
        int right = searchColumn(y, n-1, false);
        int top = searchRow(0, x, true);
        int bottom = searchRow(x, m-1, false);
        return (right-left+1)*(bottom-top+1);
    }
    
    public int searchColumn(int start, int end, boolean isLeft) {
        int l=start, r=end;
        while (l <= r) {
            int mid = (l+r)/2;
            int k;
            for (k=0; k<m; k++) {
                if (image[k][mid] == '1') break;
            }
            if (isLeft) {
                if (k<m) r=mid-1;
                else l=mid+1;
            }
            else {
                if (k<m) l=mid+1;
                else r=mid-1;
            }
        }
        return isLeft? l : r;
    }
    
    public int searchRow(int start, int end, boolean isTop) {
        int l=start, r=end;
        while (l<=r) {
            int mid = (l+r)/2;
            int k;
            for (k=0; k<n; k++) {
                if (image[mid][k] == '1') break;
            }
            if (isTop) {
                if (k<n) r=mid-1;
                else l=mid+1;
            }
            else {
                if (k<n) l=m+1;
                else r=m-1;
            }
        }
        return isTop? l : r;
    }
}
