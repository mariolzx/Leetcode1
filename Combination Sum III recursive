public class Solution {
    private List<List<Integer>> results=new LinkedList<List<Integer>>();
    public List<List<Integer>> combinationSum3(int k, int n) {
    int[] candidates=new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
    LinkedList<Integer> solution=new LinkedList<Integer>();    
    helper(candidates, 0, 0, k, n, solution);
    return results;
    }
    
    private void helper(int[] candidates, int k, int l, int levels, int n, LinkedList<Integer> solution) {
        if ((n<0)||(l>levels)) return;
        if ((n==0)&&(l==levels)) { 
            LinkedList<Integer> res=new LinkedList<Integer>(solution);
            results.add(res);
            return;
        }
        
     
     for (int i=k; i<candidates.length; i++) {
         solution.add(candidates[i]);
         helper(candidates, i+1, l+1, levels, n-candidates[i], solution);
         solution.remove(solution.size()-1);
     }
     
    }
}
