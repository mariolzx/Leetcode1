//Time Complexity of optimized solution: O(logn)

public class Solution {
public double power(double x, int n) {
	if (n == 0)
		return 1;
 
	double v = power(x, n / 2);
 
	if (n % 2 == 0) {
		return v * v;
	} else {
		return v * v * x;
	}
}
 
public double pow(double x, int n) {
	if (n < 0) {
		return 1 / power(x, -n);
	} else {
		return power(x, n);
	}
}
}

////////////////////////
int powFast(int b, int e) {
    int p = 1;   
    while (e > 0) {
        if(e%2 != 0) {
            p = p*b;  
        } 
        e = e / 2;
        b = b * b;
    }
    return p;
}

