public class Solution {
    List<List<Integer>> ret;
    public List<List<Integer>> permute(int[] num) {
        ret = new LinkedList<>();
        LinkedList<Integer> numbers = new LinkedList<>();
        for (int i = 0; i < num.length; i++)
            numbers.add(num[i]);
        LinkedList<Integer> list = new LinkedList<>();
        permute(numbers, list);
        return ret;
    }
    
    private void permute(List<Integer> numbers, List<Integer> list) {
        if (numbers.size() == 0) {
            LinkedList<Integer> newList = new LinkedList<>();
            newList.addAll(list);
            ret.add(newList);
            return;
        }
        for (int i = 0; i < numbers.size(); i++) {
            int candidate = numbers.get(i);
            numbers.remove(i);
            list.add(candidate);
            permute(numbers, list);
            list.remove(list.size() - 1);
            numbers.add(i, candidate);
        }
    }
}
