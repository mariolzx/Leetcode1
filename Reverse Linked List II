package leetcode.linkedlist;
 
/**
 * Solution: traversal to m, reverse m to n, concat the last n nodes.
 * Use dummy because of many add functions.
 * Here, reverse List from mNode.next(usually we begin from head). It doesn't matter.
 * In addition, we must mark mNode(rear of reverse list) because we must finish in one-pass.
 * 
 * @author jeffwan
 * @date Mar 7, 2014
 */
public class ReverseBetween {
	
	public ListNode reverseBetween(ListNode head, int m, int n) {
		if ( head == null || m >= n) {
			return head;
		}
		
		ListNode dummy = new ListNode(0);
		dummy.next = head;
		head = dummy;
		
		// 1. First 0 - m-1 Part
		for (int i = 1; i < m; i++) {
			if ( head== null) {
				return null;
			}
			head = head.next;
		}
		
		// 2. Second m - n Part
		ListNode premNode = head;
		ListNode mNode = head.next;
		ListNode nNode = mNode, postnNode = mNode.next;
		for (int i = m; i < n; i++) {
			if (postnNode == null) {
				return null;
			}
			
			ListNode temp = postnNode.next;
			postnNode.next = nNode;
			nNode = postnNode;
			postnNode = temp;
		}
		
		// 3. Third Part last n.
		mNode.next = postnNode;
		premNode.next = nNode;
		
		return dummy.next;
	}
	
	class ListNode {
		int val;
		ListNode next;
		ListNode (int x) { this.val = x; }
	}
}
 
