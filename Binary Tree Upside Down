Bottom up approach:
Although the code for the top-down approach seems concise, it is actually subtle and there are a lot of hidden traps
if you are not careful. The other approach is thinking recursively in a bottom-up fashion. If we reassign the bottom
-level nodes before the upper ones, we wonâ€™t have to make copies and worry about overwriting something. We know the 
new root will be the left-most leaf node, so we begin the reassignment here., w5 \) H9 {1 }/ P* r& q7 D

public TreeNode UpsideDownBinaryTree(TreeNode root) {
   return dfsBottomUp(root, null);
}
private TreeNode dfsBottomUp(TreeNode p, TreeNode parent) {& d2 s: f" M7 a: \. ~
   if (p == null) return parent;
   TreeNode root = dfsBottomUp(p.left, p);1 J7 i( D& T$ _7 I: _
   p.left = (parent == null) ? parent : parent.right;
   p.right = parent;) x' w) c" P( w' [9 X
   return root;' {% b& y- ]) o6 s9 `* P# }5 O
}
