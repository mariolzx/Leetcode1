// http://likesky3.iteye.com/blog/2240170

// Method 3:Union-Find
public class Solution {
    int[][] s;
    int m, n;
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0)
            return 0;
        initUnionFind(grid);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '0') continue;
                if (j + 1 < n && grid[i][j + 1] == '1')
                    union(i, j, i, j + 1);
                if (i + 1 < m && grid[i + 1][j] == '1')
                    union(i, j, i + 1, j);
            }
        }
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (s[i][j] < 0)
                    count++;
            }
        }
        return count;
    }

    
    public void initUnionFind(char[][] grid) {
        m = grid.length;
        n = grid[0].length;
        s = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1')
                    s[i][j] = -1;
            }
        }
    }

    public int find(int i, int j) {
        if (s[i][j] < 0) {
            return i * n + j;
        } else {
            return s[i][j] = find(s[i][j] / n, s[i][j] % n);
        }
    }

    public void union(int i1, int j1, int i2, int j2) {
        int root1 = find(i1, j1), root2 = find(i2, j2);
        if (root1 == root2) return; // without this, fail @["111","111","111"]
        int iRoot1 = root1 / n, jRoot1 = root1 % n;
        int iRoot2 = root2 / n, jRoot2 = root2 % n;
        s[iRoot1][jRoot1] = iRoot2 * n + jRoot2;
    }
}
