// http://yucoding.blogspot.com/2013/05/leetcode-question-105-subsets-ii.html
public class Solution {
        public ArrayList<ArrayList<Integer>> subsetsWithDup(int[] S) {
         ArrayList<ArrayList<Integer>> results=new ArrayList<ArrayList<Integer>>();
        if(S == null || S.length == 0) {
            return results;
        }
        Arrays.sort(S);
       results.add(new ArrayList<Integer>());
       int previous=S[0];
       int count=1;
        
  for (int i=0; i<S.length; i++) {
      int st=0;
      int size=results.size();
      if (S[i]==previous) {size_previous=size-count;} //get previous iteration size
      //In sum up, when meet the same element as previous one, then generate new subsets ONLY from the subsets generated from previous iteration, 
      //other than the whole subsets list
      count=0;
      for (int j=size_previous; j<size; j++) {
          ArrayList<Integer> solution=new ArrayList<Integer>(results.get(j));
          solution.add(S[i]);
          results.add(solution);
          count++;
          }
     previous=S[i];
  }
        return results;
    }
    
}





Then we take the duplicates into account, the same example:
when n=1, subsets :  {}, {"1"},  "i" means the ith element.
when n=2, subsets:   {}, {"1"}, {"2"}, {"1", "2"}
when n=3, but "2"=="3" subsets: 
   {}, {"1"}, {"2"}, {"1", "2"}, {"3"}, {"1","3"}, {"2","3"}, {"1", "2","3"}
since "2"=="3", which truly is:
   {}, {"1"}, {"2"}, {"1", "2"}, {"2"}, {"1","2"}, {"2","2"}, {"1", "2","2"}
where the bold ones are not needed.
So, how these two subsets are generated? They are from the subsets of n=1.

In sum up, when meet the same element as previous one, 
then generate new subsets ONLY from the subsets generated from previous iteration, 
other than the whole subsets list.
