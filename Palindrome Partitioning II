http://www.lifeincode.net/programming/leetcode-palindrome-partitioning-i-and-iijava/

public class Solution {
    public int minCut(String s) {
        int n = s.length();
        boolean[][] isPalindrome = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j >= 0; j--) {
                if (s.charAt(i) == s.charAt(j)) {
                    if (i - j < 2 || isPalindrome[i - 1][j + 1])
                        isPalindrome[i][j] = true;
                }
            }
        }
        
        int[] minCut = new int[n + 1];
        for (int i = n; i >= 0; i--)
            {minCut[i] = n - 1 - i;} //maximum cuts to the minCut[n-1] element
            
        for (int j = n - 1; j >= 0; j--) {
            for (int i = j; i < n; i++) {
                if (isPalindrome[i][j]) {
                    minCut[j] = Math.min(minCut[j], 1 + minCut[i + 1]);
                }
            }
        }
        
        return minCut[0];
    }
}
