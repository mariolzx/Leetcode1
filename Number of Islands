// Method 1:BFS
public class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0)
            return 0;
        int rows = grid.length, cols = grid[0].length;
        int num = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == '1') {
                    bfs(i, j, grid);
                    num++;
                }
            }
        }
        return num;
    }
    private void bfs(int i, int j, char[][] grid) {
        grid[i][j] = '2';
        LinkedList<Integer> queue = new LinkedList<Integer>();
        int cols = grid[0].length;
        queue.offer(i * cols + j);
        while (!queue.isEmpty()) {
            int idx = queue.poll();
            int r = idx / cols;
            int c = idx % cols;
            visit(r + 1, c, grid, queue);
            visit(r - 1, c, grid, queue);
            visit(r, c + 1, grid, queue);
            visit(r, c - 1, grid, queue);
        }
    }
    private void visit(int i, int j, char[][] grid, LinkedList<Integer> queue) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != '1')
            return;
        grid[i][j] = '2';
        queue.offer(i * grid[0].length + j);
    }
}
