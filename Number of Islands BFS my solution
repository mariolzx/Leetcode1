public class Solution {
    
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0)
            return 0;
        int m=0;
        for (int i=0; i<grid.length; i++) 
           for (int j=0; j<grid[0].length; j++) {
               if (grid[i][j]=='1') {
                      BFS(i, j, grid);
                      m++;
               }
           }
        return m;
    }
    
    private void BFS(int i, int j, char[][] grid) {
      //if ((i<0)||(j<0)||(i>=grid.length)||(j>=grid[0].length)) return;
      
      LinkedList<Integer> que=new LinkedList<Integer>();
      grid[i][j]='2';
      que.offer(i*grid[0].length+j);
      int temp;
        while(!que.isEmpty()) {
              temp=que.poll();
                   i = temp / grid[0].length;
                   j = temp % grid[0].length;
              if (!((i+1) < 0 || (i+1) >= grid.length || j < 0 || j >= grid[0].length||grid[i+1][j]!='1')) 
                   {grid[i+1][j]='2'; 
                   que.offer((i+1)*grid[0].length+j);}
                   
              if (!((i-1) < 0 || (i-1) >= grid.length || j < 0 || j >= grid[0].length||grid[i-1][j]!='1')) 
                  {grid[i-1][j]='2'; 
                  que.offer((i-1)*grid[0].length+j);}
                  
              if (!(i < 0 || i >= grid.length || (j+1) < 0 || (j+1) >= grid[0].length||grid[i][j+1]!='1')) 
                  {grid[i][j+1]='2'; 
                   que.offer(i*grid[0].length+j+1);}
              
              if (!(i < 0 || i >= grid.length || (j-1) < 0 || (j-1) >= grid[0].length||grid[i][j-1]!='1')) 
                 {grid[i][j-1]='2'; 
                 que.offer(i*grid[0].length+j-1);}
        }
      }
    
}
